package de.peteral.kapa.solver
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import de.peteral.kapa.domain.Task
import de.peteral.kapa.domain.SubTask
import de.peteral.kapa.domain.Sprint
import de.peteral.kapa.domain.Team
import java.util.stream.Collectors

global HardSoftScoreHolder scoreHolder;

// Hard constraints

rule "Task must be assigned"
    when
        SubTask(sprint == null)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Team must have required skill"
    when
        SubTask(sprint != null, sprint.team.skills not contains task.skill)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Cannot plan above sprint velocity"
    when
        $sprint : Sprint()
        accumulate(
            SubTask(sprint == $sprint, $work : work);
            $total : sum($work);
            $total > $sprint.velocity
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Max task velocity per sprint must not be exceeded"
    when
        Task(sprintViolatesMaxVelocity)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// FIXME relying on ascending order in sprint names in configuration data here
rule "Task dependency must not be violated"
    when
        Task(firstSprint != null, previousTask != null, previousTask.lastSprint != null,
            firstSprint.name.compareTo(previousTask.lastSprint.name) <= 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// task start after

// task lead time

// Soft constraints

// sprint utilization

// costs of delay