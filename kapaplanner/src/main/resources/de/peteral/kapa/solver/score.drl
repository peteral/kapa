package de.peteral.kapa.solver
    dialect "java"

import org.optaplanner.core.api.score.buildin.bendable.BendableScoreHolder;

import de.peteral.kapa.domain.Task
import de.peteral.kapa.domain.SubTask
import de.peteral.kapa.domain.Sprint
import de.peteral.kapa.domain.Team
import de.peteral.kapa.domain.Project
import java.util.stream.Collectors

import function de.peteral.kapa.solver.SolverUtils.getSprintDifference
import function de.peteral.kapa.solver.SolverUtils.getSprintIndex
import function de.peteral.kapa.solver.SolverUtils.getSprintCount

global BendableScoreHolder scoreHolder;


// Hard constraints

rule "Team must have required skill"
    when
        SubTask(sprint != null, sprint.team.skills not contains task.skill)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 0, -1);
end

rule "Cannot plan above sprint velocity"
    when
        $sprint : Sprint()
        accumulate(
            SubTask(sprint == $sprint, $work : work);
            $total : sum($work);
            $total > $sprint.velocity
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, 1, (int) ($sprint.getVelocity() - $total));
end

rule "Max task velocity per sprint must not be exceeded"
    when
        SubTask(task.sprintViolatesMaxVelocity)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 2, -1);
end

// one task can be done only in one team
rule "One task can only be done by one team"
    when
        SubTask(sprint != null, $task : task, $team: sprint.team)
        SubTask(sprint != null, task == $task, sprint.team != $team)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 3, -1);
end

rule "Task cannot start before first possible sprint (external dependency)"
    when
        SubTask(task.firstPossibleSprint != null, task.firstSprint != null,
            task.firstSprint.name.compareTo(task.firstPossibleSprint) < 0,
            $current : task.firstSprint.name, $required : task.firstPossibleSprint
            )
    then
        scoreHolder.addHardConstraintMatch(kcontext, 4, getSprintDifference($current, $required));
end

rule "Task dependency must not be violated"
    when
        $task: SubTask(sprint != null)
        SubTask(task != $task.task, sprint != null, task.isBlockedBy($task.task), $task.task.lastSprint != null,
            sprint.name.compareTo($task.sprint.name) <= 0,
            $current : sprint.name
            )
    then
        scoreHolder.addHardConstraintMatch(kcontext, 5, getSprintDifference($current, $task.getSprint().getName()) - 1);
end

rule "Due Task must be assigned"
    when
        SubTask(sprint == null, task.project.due != null)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 6, -1);
end


// Soft constraints

rule "Minimize costs of delay"
    when
        Project(costsOfDelay > 0 && due != null && lastSprint != null,
            $due : due, $lastSprint : lastSprint.name, $costs : costsOfDelay)
    then
        int score = getSprintDifference($lastSprint, $due) * $costs;
        score = (score > 0) ? score : 0;
        scoreHolder.addSoftConstraintMatch(kcontext, 0, - score);
end


rule "High sprint utilization is beneficiary"
    when
        $sprint : Sprint()
        accumulate(
            SubTask(sprint == $sprint, $work : work);
            $total : sum($work)
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 1,
            - (int) ((getSprintCount() - getSprintIndex($sprint.getName())) * ($sprint.getVelocity() - $total)));
end
