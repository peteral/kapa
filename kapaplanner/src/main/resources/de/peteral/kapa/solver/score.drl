package de.peteral.kapa.solver
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import de.peteral.kapa.domain.Task
import de.peteral.kapa.domain.SubTask
import de.peteral.kapa.domain.Sprint
import de.peteral.kapa.domain.Team
import java.util.stream.Collectors

global HardSoftScoreHolder scoreHolder;

// Hard constraints

rule "Task must be assigned"
    when
        SubTask(sprint == null)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Team must have required skill"
    when
        SubTask(sprint != null, sprint.team.skills not contains task.skill)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Cannot plan above sprint velocity"
    when
        $sprint : Sprint()
        accumulate(
            SubTask(sprint == $sprint, $work : work);
            $total : sum($work);
            $total > $sprint.velocity
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Max task velocity per sprint must not be exceeded"
    when
        Task(sprintViolatesMaxVelocity)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// FIXME relying on ascending order in sprint names in configuration data here
rule "Task dependency must not be violated"
    when
        $task: Task()
        Task(firstSprint != null, previousTasks contains $task, $task.lastSprint != null,
            firstSprint.name.compareTo($task.lastSprint.name) <= 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// FIXME relying on ascending order in sprint names in configuration data here
rule "Task cannot start before first possible sprint (external dependency)"
    when
        Task(firstPossibleSprint != null, firstSprint != null, firstSprint.name.compareTo(firstPossibleSprint) < 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// one task can be done only in one team
rule "One task can only be done by one team"
    when
        SubTask(sprint != null, $task : task, $team: sprint.team)
        SubTask(sprint != null, task == $task, sprint.team != $team)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// Soft constraints

// TODO costs currently scaling with number of tasks and not time due
rule "Minimize costs of delay"
    when
        Task(lastSprint != null, project.due != null, project.costsOfDelay != null,
            project.due.compareTo(lastSprint.getName()) < 0, $costs : project.costsOfDelay)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $costs);
end

// proper sprint utilitation seems to work without any rules